/* 
 * This is the main header file for the RX-8 coolant monitor project.
 * Author: Stephane Gilbert
 * BSD tree clause licence (SPDX: BSD-3-Clause)
*/

// Display a warning sign when the coolant temperature is equal or exceed this temperature
#define COOLANT_TEMP_WARNING_CELSIUS 110

// Display a warning sign when the coolant pressure equal or exceed this value
#define COOLANT_PSI_WARNING 13

// Display a warning sign when the battery voltage is below or above these values
#define BATTERY_VOLTAGE_LOW_WARNING 11.6
#define BATTERY_VOLTAGE_HIGH_WARNING 14.8

// The speed at which the display refreshes the displayed values
#define DISPLAY_REFRESH_RATE_HZ 4

// Position of the displayed value in the display. Do not change this.
#define TEXT_POS_X 30
#define TEXT_POS_Y 4

// Digital pins definitions
#define UNUSED_PIN_0 0
#define UNUSED_PIN_1 1
#define UNUSED_PIN_2 2
#define UNUSED_PIN_3 3
#define UNUSED_PIN_4 4
#define UNUSED_PIN_5 5
#define UNUSED_PIN_6 6
#define TEMPERATURE_UNIT_SELECTOR_INPUT_PIN 8
#define DISPLAY_1_SELECT_OUTPUT_PIN 10
#define DISPLAY_2_SELECT_OUTPUT_PIN 9
#define DISPLAY_3_SELECT_OUTPUT_PIN 7
#define UNUSED_PIN_14 14
#define UNUSED_PIN_15 15
#define THERMISTOR_REFERENCE_SELECT_OUTPUT_PIN 16

// Analog pin definition
#define PSI_ANALOG_INPUT_PIN A0            // Digital out 18
#define ILLUMINATION_ANALOG_INPUT_PIN A1   // Digital out 19
#define REFERENCE_ANALOG_INPUT_PIN A2      // Digital out 20
#define COOLANT_ANALOG_INPUT_PIN A3        // Digital out 21
#define VOLTAGE_ANALOG_INPUT_PIN A6        // Digital out 4

/* Thermistor value and treshold
 * The Delphi 12160855 or AEM 30-2012 sensor, like all thermistors don't have a linear curve
 * So to have a good precision on the full temperature scale, we use two different resistor value
 * to calculate the temperature. One for the low end to mid, and one for the high end.
 * Since we mesure en engine coolant temperature, the high end reading must be accurate.
 * The reference resistors and the treshold to switch between them are determined by the value below.
 * An hysteresis is used to avoid changing the reference too often.
 */
// For the best results, mesure the actual value on your specific board and use high precision %1 resistor or better.
// Important: Enter the value as float
#define THERMISTOR_RESISTOR_REFERENCE_HIGH 14922.0
// This is the parallel value of both the above reference resistor and a second one
// Important: Enter the value as float
#define THERMISTOR_RESISTOR_REFERENCE_LOW 936.5
// The treshold values to toggle between high resistor and low resistor
#define THERMISTOR_RESISTOR_REFERENCE_LOW_TRESHOLD 55
#define THERMISTOR_RESISTOR_REFERENCE_HIGH_TRESHOLD 50

// There is an onboard tension divider that allow to read the supply voltage (12V).
// The raw voltage is too high for the Arduino, so the voltage is divided with resistors.
// For the best results, mesure the actual values on your specific board and use high precision %1 resistor or better.
// Important: Enter the value as float
// These values below allow a voltage range from 0 to 18V
#define VOLTAGE_DIVIDER_R1 3904.0
#define VOLTAGE_DIVIDER_R2 1477.0

// The following if for analog read.
// For improving accuracy, an external voltage refernece is used and many samples are gathered for
// each analog read operation.
// Reference used for the ADC to accuratly mesure voltage
#define ANALOG_REFERENCE_VOLTAGE 4.096
// Number of sample to read for each analog acquisition
#define ANALOG_SAMPLES_COUNT 5
// The number of time to wait between analog acquisitions.
#define ANALOG_DELAY_BETWEEN_ACQUISITIONS 5

/* ERROR Codes */
#define ENOERR 0
#define ERANGE 1
#define EDIVZERO 2

/* Custom icons definitions.
 * Made with Gimp and converted with image2cpp
 * https://javl.github.io/image2cpp
 * The original file are located in the 'bitmaps' folder
 */
// 'degree_sign sign', 8x10px
const unsigned char epd_bitmap_degree_sign [] PROGMEM= {
    0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0xDE, 0x71, 0xB0, 0x78, 0x3C, 0x1E,
    0x0F, 0x07, 0x83, 0xE3, 0x6F, 0x30, 0x18, 0x0C, 0x00, 0x3B, 0x67, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
    0xC3, 0x67, 0x3B, 0x03, 0x03, 0x03, 0xDF, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x00, 0x3E, 0xE3, 0xC0,
    0xC0, 0xE0, 0x3C, 0x07, 0xC3, 0xE3, 0x7E, 0x66, 0xF6, 0x66, 0x66, 0x66, 0x67, 0xC3, 0xC3, 0xC3,
    0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC7, 0x7B, 0xC1, 0xA0, 0x98, 0xCC, 0x42, 0x21, 0xB0, 0xD0, 0x28
};

// 'coolant_icon_c', 24x25px
const unsigned char epd_bitmap_coolant_icon_c [] PROGMEM = {
    0x00, 0x18, 0x00, 0x00, 0x3c, 0x06, 0x00, 0x3c, 0x08, 0x00, 0x3f, 0x88, 0x00, 0x3f, 0x88, 0x00, 
    0x3c, 0x06, 0x00, 0x3c, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0x80, 0x00, 0x3c, 0x00, 0x00, 0x3c, 
    0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0x80, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 
    0x00, 0x7e, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7e, 0x00, 0x33, 0x3c, 0xcc, 0x0c, 
    0x18, 0x30, 0xc0, 0xc3, 0x03, 0x33, 0x3c, 0xcc, 0x0c, 0x00, 0x30
};

// 'coolant_icon_f', 24x25px
const unsigned char epd_bitmap_coolant_icon_f [] PROGMEM = {
    0x00, 0x18, 0x00, 0x00, 0x3c, 0x0e, 0x00, 0x3c, 0x08, 0x00, 0x3f, 0x8c, 0x00, 0x3f, 0x88, 0x00, 
    0x3c, 0x08, 0x00, 0x3c, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0x80, 0x00, 0x3c, 0x00, 0x00, 0x3c, 
    0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0x80, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 
    0x00, 0x7e, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7e, 0x00, 0x33, 0x3c, 0xcc, 0x0c, 
    0x18, 0x30, 0xc0, 0xc3, 0x03, 0x33, 0x3c, 0xcc, 0x0c, 0x00, 0x30
};

// 'warning', 31x31px
const unsigned char epd_bitmap_warning_icon [] PROGMEM = {
    0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x07, 0xc0, 0x00,
    0x00, 0x07, 0xc0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x1c, 0x70, 0x00,
    0x00, 0x1c, 0x70, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x70, 0x1c, 0x00,
    0x00, 0x70, 0x1c, 0x00, 0x00, 0xe3, 0x8e, 0x00, 0x00, 0xe3, 0x8e, 0x00, 0x01, 0xc3, 0x87, 0x00,
    0x01, 0xc3, 0x87, 0x00, 0x03, 0x83, 0x83, 0x80, 0x03, 0x83, 0x83, 0x80, 0x07, 0x03, 0x81, 0xc0,
    0x07, 0x03, 0x81, 0xc0, 0x0e, 0x03, 0x80, 0xe0, 0x0e, 0x03, 0x80, 0xe0, 0x1c, 0x00, 0x00, 0x70,
    0x1c, 0x00, 0x00, 0x70, 0x38, 0x03, 0x80, 0x38, 0x38, 0x03, 0x80, 0x38, 0x70, 0x03, 0x80, 0x1c,
    0x70, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe
};

// 'psi sign', 15x7px
const unsigned char epd_bitmap_psi_sign [] PROGMEM = {
    0xf3, 0xce, 0x92, 0x04, 0x92, 0x04, 0xf3, 0xc4, 0x80, 0x44, 0x80, 0x44, 0x83, 0xce
};

// 'rad psi3 icon', 20x28px
const unsigned char epd_bitmap_rad_psi3_icon [] PROGMEM = {
    0x00, 0x07, 0xc0, 0x00, 0x02, 0x80, 0x00, 0x02, 0x80, 0x7f, 0xfe, 0xf0, 0x40, 0x00, 0x10, 0x40,
    0x00, 0x10, 0xc0, 0x00, 0x10, 0x00, 0x00, 0x10, 0xc0, 0x00, 0x10, 0x40, 0x00, 0x10, 0x40, 0x00,
    0x10, 0x48, 0x20, 0x90, 0x5c, 0x71, 0xd0, 0x7e, 0xfb, 0xf0, 0x7f, 0xff, 0xf0, 0x7f, 0xff, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00,
    0xf8, 0x00, 0x18, 0x70, 0xc0, 0x06, 0x23, 0x00, 0x01, 0x04, 0x00, 0x38, 0xf8, 0xe0, 0x04, 0x01,
    0x00, 0x03, 0xfe, 0x00
};

// 'rx8_logo', 128x19px
const unsigned char epd_bitmap_rx8_logo [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xc0, 
    0x00, 0x3f, 0xff, 0xff, 0xfe, 0x0f, 0x80, 0x00, 0x03, 0xff, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x40, 
    0x01, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf0, 0x00, 0x1f, 0xf8, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 
    0x07, 0xff, 0x00, 0x1f, 0xff, 0xc1, 0xfc, 0x00, 0xff, 0xc0, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x03, 
    0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0xff, 0x03, 0xff, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x1f, 0xfe, 
    0x00, 0x03, 0xc0, 0x01, 0xff, 0x00, 0x1f, 0xdf, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 
    0x00, 0x0f, 0x80, 0x0f, 0xfc, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x7f, 0x80, 0xff, 0xff, 0xe0, 0x00, 
    0x00, 0x3f, 0x00, 0x7f, 0xf0, 0x00, 0x07, 0xff, 0x80, 0x7f, 0xfe, 0x00, 0x7f, 0xff, 0x00, 0x00, 
    0x00, 0xfc, 0x0f, 0xfe, 0x00, 0x00, 0x0f, 0xfe, 0x03, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xe0, 0x00, 
    0x01, 0xf8, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x7f, 0xf8, 0x00, 
    0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x01, 0xff, 0xc0, 0x1f, 0xfe, 0x00, 
    0x07, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0x9f, 0xc0, 0x00, 0x07, 0xfe, 0x00, 0x0f, 0xff, 0x00, 
    0x0f, 0xe0, 0xff, 0xf8, 0x00, 0x07, 0xfc, 0x0f, 0xf0, 0x00, 0x1f, 0xf8, 0x00, 0x07, 0xff, 0x00, 
    0x1f, 0xc0, 0x1f, 0xff, 0x80, 0x1f, 0xf8, 0x03, 0xf8, 0x00, 0x3f, 0xf0, 0x00, 0x0f, 0xfe, 0x00, 
    0x3f, 0x80, 0x07, 0xff, 0xf8, 0x7f, 0xf0, 0x01, 0xfe, 0x00, 0x3f, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 
    0x3f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 
    0x7f, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xc0, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 
    0xff, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00
};

// 'fault', 102x26px
const unsigned char epd_bitmap_fault [] PROGMEM = {
    0x0f, 0xff, 0xe0, 0x0f, 0xc0, 0x0f, 0x80, 0x1f, 0x0f, 0x00, 0x1f, 0xff, 0xfc, 0x0f, 0xff, 0xe0, 
    0x0f, 0xc0, 0x0f, 0x80, 0x1e, 0x0f, 0x00, 0x1f, 0xff, 0xfc, 0x1f, 0xff, 0xe0, 0x1f, 0xc0, 0x0f, 
    0x80, 0x1e, 0x1f, 0x00, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x1f, 0xc0, 0x0f, 0x80, 0x1e, 0x1f, 
    0x00, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x1f, 0xe0, 0x0f, 0x00, 0x3e, 0x1f, 0x00, 0x3f, 0xff, 
    0xf0, 0x1f, 0x00, 0x00, 0x3d, 0xe0, 0x0f, 0x00, 0x3e, 0x1f, 0x00, 0x00, 0x7c, 0x00, 0x1e, 0x00, 
    0x00, 0x3d, 0xe0, 0x1f, 0x00, 0x3e, 0x1e, 0x00, 0x00, 0x7c, 0x00, 0x1e, 0x00, 0x00, 0x79, 0xe0, 
    0x1f, 0x00, 0x3c, 0x1e, 0x00, 0x00, 0x78, 0x00, 0x3e, 0x00, 0x00, 0xf9, 0xe0, 0x1f, 0x00, 0x3c, 
    0x3e, 0x00, 0x00, 0x78, 0x00, 0x3e, 0x00, 0x00, 0xf1, 0xf0, 0x1f, 0x00, 0x7c, 0x3e, 0x00, 0x00, 
    0xf8, 0x00, 0x3e, 0x00, 0x00, 0xf1, 0xf0, 0x1f, 0x00, 0x7c, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x3f, 
    0xff, 0x81, 0xf1, 0xf0, 0x1e, 0x00, 0x7c, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x3f, 0xff, 0x81, 0xe0, 
    0xf0, 0x3e, 0x00, 0x7c, 0x3c, 0x00, 0x00, 0xf8, 0x00, 0x3f, 0xff, 0x03, 0xe0, 0xf0, 0x3e, 0x00, 
    0x78, 0x3c, 0x00, 0x00, 0xf0, 0x00, 0x7f, 0xff, 0x03, 0xc0, 0xf0, 0x3e, 0x00, 0x78, 0x7c, 0x00, 
    0x00, 0xf0, 0x00, 0x7c, 0x00, 0x07, 0xff, 0xf0, 0x3e, 0x00, 0xf8, 0x7c, 0x00, 0x01, 0xf0, 0x00, 
    0x7c, 0x00, 0x07, 0xff, 0xf0, 0x3c, 0x00, 0xf8, 0x7c, 0x00, 0x01, 0xf0, 0x00, 0x78, 0x00, 0x07, 
    0xff, 0xf8, 0x3c, 0x00, 0xf8, 0x7c, 0x00, 0x01, 0xf0, 0x00, 0x78, 0x00, 0x0f, 0xff, 0xf8, 0x3c, 
    0x00, 0xf8, 0x78, 0x00, 0x01, 0xf0, 0x00, 0x78, 0x00, 0x1f, 0x00, 0xf8, 0x3e, 0x01, 0xf0, 0x78, 
    0x00, 0x01, 0xe0, 0x00, 0xf8, 0x00, 0x1e, 0x00, 0x78, 0x3f, 0x03, 0xf0, 0xf8, 0x00, 0x01, 0xe0, 
    0x00, 0xf8, 0x00, 0x3e, 0x00, 0x78, 0x1f, 0xff, 0xe0, 0xff, 0xff, 0x03, 0xe0, 0x00, 0xf8, 0x00, 
    0x3c, 0x00, 0x78, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0x03, 0xe0, 0x00, 0xf8, 0x00, 0x3c, 0x00, 0x78, 
    0x1f, 0xff, 0xc0, 0xff, 0xff, 0x03, 0xe0, 0x00, 0xf0, 0x00, 0x7c, 0x00, 0x7c, 0x07, 0xff, 0x80, 
    0xff, 0xff, 0x03, 0xe0, 0x00, 0xf0, 0x00, 0x78, 0x00, 0x7c, 0x01, 0xfc, 0x00, 0xff, 0xff, 0x03, 
    0xc0, 0x00
};

// 'voltage', 12x28px
const unsigned char epd_bitmap_voltage_icon [] PROGMEM = {
    0x07, 0xc0, 0x0f, 0x80, 0x0f, 0x80, 0x0f, 0x80, 0x0f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x1e, 0x00, 
    0x3e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x7c, 0x00, 0x7f, 0xf0, 0x7f, 0xe0, 0x7f, 0xe0, 
    0xff, 0xc0, 0x03, 0xc0, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x00, 0x07, 0x00, 0x06, 0x00, 
    0x06, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
};

// 'voltage_sign', 7x8px
const unsigned char epd_bitmap_voltage_sign [] PROGMEM = {
    0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10
};

// Icons size object
typedef struct {
  uint8_t width;       // Icon width
  uint8_t height;      // Icon height
} IconSize;

// Icon size table
const IconSize iconSize[] PROGMEM = {
    {8, 10},    // degree_sign
    {24, 25},   // Coolant icon Celsius
    {24, 25},   // Coolant icon Fahrenheit
    {31, 31},   // Warning Icon
    {15, 7},    // PSI sign
    {20, 28},   // Radiator pressure icon
    {128, 19},  // RX-8 stylized logo
    {102, 26},  // Fault message
    {12, 28},   // Voltage icon
    {7, 8}};    // Voltage sign

enum class Icon: uint8_t {
    degree_sign = 0,
    coolant_icon_c,
    coolant_icon_f,
    warning_icon,
    psi_sign,
    radiator_pressure_icon,
    rx8_logo,
    fault_message,
    voltage_icon,
    voltage_sign
};

const unsigned char* epd_bitmap_allArray[sizeof(iconSize) / sizeof(IconSize)] = {
    epd_bitmap_degree_sign,
    epd_bitmap_coolant_icon_c,
    epd_bitmap_coolant_icon_f,
    epd_bitmap_warning_icon,
    epd_bitmap_psi_sign,
    epd_bitmap_rad_psi3_icon,
    epd_bitmap_rx8_logo,
    epd_bitmap_fault,
    epd_bitmap_voltage_icon,
    epd_bitmap_voltage_sign
};
